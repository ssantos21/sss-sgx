enclave {
    trusted {
        public int trusted_func01(void);

        public sgx_status_t generate_new_secret(
            size_t threshold, 
            size_t share_count,
            size_t secret_length,
            [out, size=sealed_secret_size] char* sealed_secret, size_t sealed_secret_size,
            [out, size=sealed_total_share_size] char* sealed_shares, size_t sealed_total_share_size
        );

        sgx_status_t seal_key_share(
            [in, size=key_share_size] unsigned char* key_share, size_t key_share_size,
            [out, size=sealed_key_share_size] char* sealed_key_share, size_t sealed_key_share_size
        );

        public sgx_status_t recover_seed(
            [in, size=sealed_total_share_size] char* sealed_shares, size_t sealed_total_share_size,
            [in, size=num_key_sealed_shares] unsigned char* indexes, size_t num_key_sealed_shares,
            size_t sealed_share_data_size,
            size_t threshold,
            [out, size=sealed_secret_size] char* sealed_secret, size_t sealed_secret_size
        );

        public sgx_status_t sealed_key_from_mnemonics(
            [in, size=xor_secret_len] unsigned char* xor_secret, size_t xor_secret_len,
            [in, size=password_len] unsigned char* password, size_t password_len,
            [out, size=sealed_key_share_size] char* sealed_key_share, size_t sealed_key_share_size
        );

    };

    untrusted {
        void ocall_wait_keyinput([in, string] const char *str);
        void ocall_print_string([in, string] const char *str);
        void ocall_print_int([in, string] const char *str, [in] const int *number);
        void ocall_print_hex([in] const unsigned char** key, [in] const int *keylen);
        void ocall_print_bip39([in, string] const char *str);
    };

};
